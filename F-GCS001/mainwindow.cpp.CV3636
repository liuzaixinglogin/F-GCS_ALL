#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "QDebug"
#include "inifile.h"
#include "QKeyEvent"
#include "waypointitem.h"
#include "math.h"

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    //this->installEventFilter(this);
    //this->setWindowFlags(Qt::FramelessWindowHint);
    //this->setWindowFlags(Qt::WindowTitleHint | Qt::CustomizeWindowHint | Qt::WindowMinimizeButtonHint | Qt::WindowMaximizeButtonHint);
    //setWindowFlags(windowFlags() & ~Qt::WindowCloseButtonHint);
    //this->setWindowFlags(Qt::CustomizeWindowHint|Qt::WindowTitleHint);
    //工具栏初始化
    /*
    ui->Airplane->setEnabled(false);
    ui->Setting->setEnabled(false);
    ui->SaveData->setEnabled(false);
    ui->MapSetting->setEnabled(false);
    ui->Mission->setEnabled(false);
    ui->Rule->setEnabled(false);
    */
    /*
    ui->RouteButton->setHidden(true);
    ui->LandingButton->setHidden(true);
    ui->TakeOffButton->setHidden(true);
    ui->LockButton->setHidden(true);
    */

    ui->TravelButton->setEnabled(false);
    ui->RouteButton->setEnabled(false);
    ui->LandingButton->setEnabled(false);
    ui->BackhomeButton->setEnabled(false);
    ui->TakeOffButton->setEnabled(false);
    ui->CutOff->setHidden(true);
    //声音初始化
    IniFile *SoundIni = new IniFile();
    isOpenSound =  SoundIni->ReadIni("FGCS.ini","Sound","Open").toInt();
    AlertSound = new QSound("./Alert/Alert.wav");
    AlertSound->setLoops(-1);
    //AlertSound->play();
    //变量初始化
    datasave = NULL;
    SaveFreq = 100;//默认10Hz频率记录数据

    m_UseSpeed = 0;
    m_wzSpeed = 0;
    m_BoardHight = 0;

    //心跳定时器初始化
    HeartBeat = new QTimer;
    connect(HeartBeat,SIGNAL(timeout()),
            this,SLOT(SendHeartBeat(void)));


    //计数器初始化
    TickTimer = new QTimer;
    connect(TickTimer,SIGNAL(timeout()),
            this,SLOT(TickTimerOut()));

    //窗口数量控制初始化
    isSetSerialOpen  = 0;
    isSetMissionOpen = 0;
    isAirplaneOpen   = 0;
    isRuleOpen       = 0;
    isSettingOpen    = 0;
    isMapSettingOpen = 0;
    isSaveDataOpen   = 0;


    //串口初始化
    myPort = new QextSerialPort(QextSerialPort::EventDriven,this);
    myPort->setPortName("-1");
    connect(myPort,SIGNAL(readyRead()),this,SLOT(ReadSerial()));

    myDecode = new Decode;
    DecodeThread = new QThread;
    myDecode->moveToThread(DecodeThread);

    datasaveThread = new QThread;
    datasave = new DataSave;
    datasave->moveToThread(datasaveThread);

    connect(myDecode,SIGNAL(ShowRemote(quint8,quint8,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,quint8,quint8,double,double,float,float,quint8,quint8,double,double,float,float,quint8,quint8,quint8,quint8,float,float,float,float,float,float,float,float,float,float,quint8,float,float,float,float,float,float,float,float,float,float,float,float,float,float,quint16,quint16,quint16,float,float,float,float,float,float,float,float,quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)),
            datasave,SLOT(Record(quint8,quint8,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,quint8,quint8,double,double,float,float,quint8,quint8,double,double,float,float,quint8,quint8,quint8,quint8,float,float,float,float,float,float,float,float,float,float,quint8,float,float,float,float,float,float,float,float,float,float,float,float,float,float,quint16,quint16,quint16,float,float,float,float,float,float,float,float,quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)));

    connect(myDecode,SIGNAL(ShowRemote(quint8,quint8,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,quint8,quint8,double,double,float,float,quint8,quint8,double,double,float,float,quint8,quint8,quint8,quint8,float,float,float,float,float,float,float,float,float,float,quint8,float,float,float,float,float,float,float,float,float,float,float,float,float,float,quint16,quint16,quint16,float,float,float,float,float,float,float,float,quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)),
            this,SLOT(DisplayRemote(quint8,quint8,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,quint8,quint8,double,double,float,float,quint8,quint8,double,double,float,float,quint8,quint8,quint8,quint8,float,float,float,float,float,float,float,float,float,float,quint8,float,float,float,float,float,float,float,float,float,float,float,float,float,float,quint16,quint16,quint16,float,float,float,float,float,float,float,float,quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)));



    DecodeThread->start();
    datasaveThread->start();

    SaveTimer = new QTimer;

    //==========地图==============
    //isWPLoop = true;//地图默认循环

    QString wploop = ReadInit("Map","WPLoop");
    isWPLoop = wploop.toInt();
    //qDebug() << isWPLoop;

    map = new mapcontrol::OPMapWidget();
    map->SetShowHome(false);
    map->SetUseOpenGL(true);
    map->SetMapType(MapType::BingSatellite);
    ui->MapgridLayout->addWidget(map);

    map->setFocus();
    map->SetShowCompass(false);
    map->setMouseTracking(true);

    //=========初始化UAV=========
    map->SetShowUAV(true);//先show才能设置
    map->SetUavPic("Rotor.png");
    ui->Panel->setPlaneMode("多旋翼");

    internals::PointLatLng position;
    position.SetLat(0);
    position.SetLng(0);
    map->UAV->SetUAVPos(position,10);
    map->UAV->SetShowTrail(false);

    connect(map,SIGNAL(EmitCurrentMousePosition(internals::PointLatLng)),this,SLOT(ShowMousePos(internals::PointLatLng)));
    connect(map,SIGNAL(WPChanged(int,double,double)),this,SLOT(WPChanged(int,double,double)));

    //SetWPLoop(isWPLoop);
}
//=================航点===========================
unsigned char point = 0;
mapcontrol::WayPointItem *OldItem;//如果清空那么要清除这个指针
mapcontrol::WayPointItem *NewItem;
mapcontrol::WayPointItem *CircleItem;
void MainWindow::mousePressEvent(QMouseEvent* event)
{
    event = event;
    internals::PointLatLng LatLng;
    LatLng.SetLat(map->currentMousePosition().Lat());
    LatLng.SetLng(map->currentMousePosition().Lng());
    ui->statusBar->showMessage(map->currentMousePosition().ToString(),1000);
    if((isSetMissionOpen == true)&&(isRuleOpen == false))//任务窗口打开，并且尺子不打开才是航点选取
    {
        if(isWPLoop == false)
        {
            NewItem = map->WPCreate(LatLng,0);
            if(OldItem != NULL)
            {
                NewItem->SetNumber(OldItem->Number()+1);
            }

            //map->WPCircleCreate(NewItem,OldItem,1,Qt::blue,false,3);

            map->WPLineCreate(OldItem,NewItem,Qt::green,false,2);
            /*
            double Angle = 200 / 111318.0f;
            LatLng.SetLat(LatLng.Lat() + Angle);
            CircleItem = map->WPCreate(LatLng,0);
            qDebug() << Angle
                     << QString::number(NewItem->Coord().Lat(),'f',8)
                     << QString::number(NewItem->Coord().Lng(),'f',8)
                     << QString::number(CircleItem->Coord().Lat(),'f',8)
                     << QString::number(CircleItem->Coord().Lng(),'f',8);

           // WPCircle(NewItem,CircleItem,200);
            map->WPCircleCreate(NewItem,CircleItem,1,Qt::blue,false,3);
            //CircleItem->deleteLater();
            */
            OldItem = NewItem;
            emit ChangePoint(NewItem);
        }
        else
        {
            if(OldItem != NULL)
            {
                mapcontrol::WayPointItem *Item1;
                mapcontrol::WayPointItem *Item2;
                mapcontrol::WayPointItem *Item3;
                //mapcontrol::WayPointItem *Item4;

                Item1 = map->WPCreate(OldItem->Coord(),0);
                int Number = OldItem->Number();

                map->WPDelete(OldItem->Number());
                Item1->SetNumber(Number);//删除和生成了
                Item2 = map->WPFind(Item1->Number() - 1);
                map->WPLineCreate(Item2,Item1,Qt::green,false,2);
                OldItem = Item1;

                Item3 = map->WPCreate(LatLng,0);
                map->WPLineCreate(OldItem,Item3,Qt::green,false,2);

                emit ChangePoint(Item3);//在列表里面生成这个
                OldItem = Item3;

                map->WPLineCreate(OldItem,map->WPFind(0),Qt::green,false,2);
            }
            else
            {
                NewItem = map->WPCreate(LatLng,0);
                if(OldItem != NULL)
                {
                    NewItem->SetNumber(OldItem->Number()+1);
                }

                map->WPLineCreate(OldItem,NewItem,Qt::green,false,2);
                OldItem = NewItem;
                emit ChangePoint(NewItem);
            }

        }

    }
    else if(isRuleOpen == true)//尺子窗口打开默认是测量
    {
        emit RulePoint(LatLng);
    }       

}

//=======================航点画圆=====================
void MainWindow::WPCircle(mapcontrol::WayPointItem *Item,mapcontrol::WayPointItem *CircleItem,double Radius)
{
        double Angle = Radius / 111318.0f;
        CircleItem = Item;

        CircleItem->Coord().SetLat(CircleItem->Coord().Lat() + Angle);
        qDebug() << Angle
                 << QString::number(Item->Coord().Lat(),'f',8)
                 << QString::number(Item->Coord().Lng(),'f',8)
                 << QString::number(CircleItem->Coord().Lat(),'f',8)
                 << QString::number(CircleItem->Coord().Lng(),'f',8);
}





//=======键盘按键处理
void MainWindow::keyPressEvent(QKeyEvent *event)
{
    switch(event->key())
    {
        case '-':
          {
                double zoom = map->ZoomTotal();
                zoom = zoom - 1;
                map->SetZoom(zoom);
          }break;
        case '=':
          {
                double zoom = map->ZoomTotal();
                zoom = zoom + 1;
                map->SetZoom(zoom);
          }break;
          case ' ':
          {
                map->SetCurrentPosition(CurrentPoint);
          }break;
          case Qt::Key_W:
          {
                internals::PointLatLng CurrentPoint;
                CurrentPoint.SetLat(map->CurrentPosition().Lat() + map->CurrentPosition().Lat()/(map->ZoomTotal()*map->ZoomTotal()*map->ZoomTotal()*map->ZoomTotal()*map->ZoomTotal()));
                CurrentPoint.SetLng(map->CurrentPosition().Lng());
                map->SetCurrentPosition(CurrentPoint);
          }break;
          case Qt::Key_S:
          {
                internals::PointLatLng CurrentPoint;
                CurrentPoint.SetLat(map->CurrentPosition().Lat() - map->CurrentPosition().Lat()/(map->ZoomTotal()*map->ZoomTotal()*map->ZoomTotal()*map->ZoomTotal()*map->ZoomTotal()));
                CurrentPoint.SetLng(map->CurrentPosition().Lng());
                map->SetCurrentPosition(CurrentPoint);
          }break;
          case Qt::Key_A:
          {
                internals::PointLatLng CurrentPoint;
                CurrentPoint.SetLat(map->CurrentPosition().Lat());
                CurrentPoint.SetLng(map->CurrentPosition().Lng() - map->CurrentPosition().Lng()/(map->ZoomTotal()*map->ZoomTotal()*map->ZoomTotal()*map->ZoomTotal()*map->ZoomTotal()));
                map->SetCurrentPosition(CurrentPoint);
          }break;
          case Qt::Key_D:
          {
                internals::PointLatLng CurrentPoint;
                CurrentPoint.SetLat(map->CurrentPosition().Lat());
                CurrentPoint.SetLng(map->CurrentPosition().Lng() + map->CurrentPosition().Lng()/(map->ZoomTotal()*map->ZoomTotal()*map->ZoomTotal()*map->ZoomTotal()*map->ZoomTotal()));
                map->SetCurrentPosition(CurrentPoint);
          }break;
    }
    map->update();
    qDebug() << event->key()
             << event->ShortcutOverride;

}

bool MainWindow::eventFilter(QObject *watched, QEvent *event)
{
    qDebug() << watched
             << event;
    return 0;
}

//=====关闭事件
void MainWindow::closeEvent(QCloseEvent *event)
{
    qApp->closeAllWindows();
    event->accept();
}


//==============删除航点=========================
void MainWindow::WPdelete(int number)
{
    mapcontrol::WayPointItem *Item1;
    mapcontrol::WayPointItem *Item2;

    if(number == OldItem->Number())
    {
        OldItem = map->WPFind(OldItem->Number() - 1);
        if(isWPLoop == true)
        {
          map->WPLineCreate(OldItem,map->WPFind(0),Qt::green,false,2);
        }
    }

    map->WPDelete(number);

    if(number == 0)
    {
        if(isWPLoop == true)
        {
          map->WPLineCreate(OldItem,map->WPFind(0),Qt::green,false,2);
        }
    }

    if(number > 0)
    {
      Item1 = map->WPFind(number-1);
      Item2 = map->WPFind(number);
      map->WPLineCreate(Item1,Item2,Qt::green,false,2);
    }


}
//=============清除所有航点======================
void MainWindow::WPdeleteALL(void)
{

    map->WPDeleteAll();
    OldItem = NULL;
}
//=============设置所有航点=====================
void MainWindow::WPSetALL(void)//设置的时候要把高度和半径设置上
{
     mapcontrol::WayPointItem *w;
     int i = 0;
     while(i != -1)
     {
         w = map->WPFind(i);
         if(w)
         {
             emit ChangePoint(w);
             i++;
         }
         else
         {
             i = -1;
         }
     }
}
//===========航点循环设置================
void MainWindow::SetWPLoop(bool Flag)
{
     isWPLoop = Flag;//循环
     if(OldItem != 0)
     {
         if(isWPLoop == true)//循环
         {
               mapcontrol::WayPointItem *Item1;
               Item1 = map->WPFind(0);
               map->WPLineCreate(OldItem,Item1,Qt::green,false,2);
         }
         else//不循环
         {
             mapcontrol::WayPointItem *Item1;
             mapcontrol::WayPointItem *Item2;

             Item1 = map->WPCreate(OldItem->Coord(),0);
             int Number = OldItem->Number();

             map->WPDelete(OldItem->Number());

             Item1->SetNumber(Number);

             Item2 = map->WPFind(Item1->Number() - 1);

             map->WPLineCreate(Item2,Item1,Qt::green,false,2);
             OldItem = Item1;
         }
     }


     //map->update();
}

//=============航点变化===================
void MainWindow::WPChanged(int Number,double Lat,double Lng)
{
    Lat = Lat;
    Lng = Lng;
    mapcontrol::WayPointItem *Item;
    Item = map->WPFind(Number);
    emit WPChangedAPoint(Number,Item->Coord().Lat(),Item->Coord().Lng());
}
//============显示鼠标所在点===================
void MainWindow::ShowMousePos(internals::PointLatLng pos)
{
    QString str = QString::number(pos.Lat(),'f',8);
    str.append(" ");
    str.append(QString::number(pos.Lng(),'f',8));
    ui->statusBar->showMessage(str,1000);
}
//===============显示下载的航点==================
void MainWindow::ShowDownloadWaypoint(quint16 CurrentPoint, double Latitude, double Longitude)
{

    internals::PointLatLng LatLng;
    LatLng.SetLat(Latitude);
    LatLng.SetLng(Longitude);

    if((OldItem != NULL)&&(OldItem->Number() == CurrentPoint))
    {
        return;
    }
    if(isWPLoop == false)
    {
        NewItem = map->WPCreate(LatLng,0);
        NewItem->SetNumber(CurrentPoint);

        map->WPLineCreate(OldItem,NewItem,Qt::green,false,2);
        OldItem = NewItem;
    }
    else
    {
        if(OldItem != NULL)
        {
            mapcontrol::WayPointItem *Item1;
            mapcontrol::WayPointItem *Item2;
            mapcontrol::WayPointItem *Item3;
            //mapcontrol::WayPointItem *Item4;

            Item1 = map->WPCreate(OldItem->Coord(),0);
            int Number = OldItem->Number();

            map->WPDelete(OldItem->Number());
            Item1->SetNumber(Number);//删除和生成了
            Item2 = map->WPFind(Item1->Number() - 1);
            map->WPLineCreate(Item2,Item1,Qt::green,false,2);
            OldItem = Item1;

            Item3 = map->WPCreate(LatLng,0);
            map->WPLineCreate(OldItem,Item3,Qt::green,false,2);

           // emit ChangePoint(Item3);//在列表里面生成这个
            OldItem = Item3;

            map->WPLineCreate(OldItem,map->WPFind(0),Qt::green,false,2);
        }
        else
        {
            NewItem = map->WPCreate(LatLng,0);
            if(OldItem != NULL)
            {
                NewItem->SetNumber(OldItem->Number()+1);
            }

            map->WPLineCreate(OldItem,NewItem,Qt::green,false,2);
            OldItem = NewItem;
            //emit ChangePoint(NewItem);
        }
    }

}

//===============清除航迹=========================
void MainWindow::CleanTrail(bool Flag)
{
    Flag = Flag;
    map->UAV->DeleteTrail();
}

//===============窗口管理==========================

void MainWindow::WindowIDUpdata(char id)
{
     if(id == 1)
     {
         isSetSerialOpen = 0;
     }
     else if(id == 2)
     {
         isAirplaneOpen  = 0;
     }
     else if(id == 3)
     {
         isSettingOpen  = 0;
     }
     else if(id == 4)
     {
         isSetMissionOpen  = 0;
     }
     else if(id == 5)
     {
         isRuleOpen  = 0;
     }
     else if(id == 6)
     {
         isMapSettingOpen  = 0;
     }
     else if(id == 7)
     {
         isSaveDataOpen  = 0;
     }
}

//===============通讯管理=======================================
void MainWindow::on_DataLink_triggered()
{
    if(isSetSerialOpen == 0)
    {
        isSetSerialOpen = 1;
        DataLinkDialog *SetSerial = new DataLinkDialog();
        connect(SetSerial,SIGNAL(isWindowClose(char)),this,SLOT(WindowIDUpdata(char)));
        connect(SetSerial,SIGNAL(SerialPortInfo(QString,BaudRateType,bool)),this,SLOT(SerialPortConnect(QString,BaudRateType,bool)));
        connect(this,SIGNAL(isSerialPortHasOpen(bool)),SetSerial,SLOT(UpdateWindow(bool)));
        SetSerial->show();
        emit isSerialPortHasOpen(myPort->isOpen());
        SetSerial->exec();
        delete SetSerial;
    }
    else
    {
        ui->statusBar->showMessage(tr("该窗口已经存在"),1000);
    }
}
//============串口打开、关闭===========================
void MainWindow::SerialPortConnect(QString Name,BaudRateType Baud,bool Flag)
{

     if(Flag == true)
     {
         if(!myPort->isOpen())
         {
             myPort->setPortName(Name);
             myPort->open(QIODevice::ReadWrite);
             myPort->setBaudRate(Baud);
             myPort->setDataBits(DATA_8);
             myPort->setParity(PAR_NONE);
             myPort->setStopBits(STOP_1);
             myPort->setFlowControl(FLOW_OFF);
             if(myPort->isOpen())
             {
                 emit isSerialPortHasOpen(true);
                 //可能存在问题，因为new两次，或者没有new就delete了
                 connect(this,SIGNAL(SerialData(QByteArray)),myDecode,SLOT(GetSerialData(QByteArray)));

                 /*
                 connect(myDecode,SIGNAL(ShowAttitude(qint16,qint16,qint16,float,float,float,qint16,qint16,qint16,float,float,float)),
                         this,SLOT(DisplayAttitude(qint16,qint16,qint16,float,float,float,qint16,qint16,qint16,float,float,float)));
                 //============
                 connect(myDecode,SIGNAL(SendFrame(QByteArray)),myPort,SLOT(SendFrame(QByteArray)));
                 //============
                 connect(myDecode,SIGNAL(ShowRouteInfo(quint8,quint8,quint8,quint8,quint8,quint16,float,float,float,float,float,float,qint16,qint16,qint16,qint16,float,float,float)),
                         this,SLOT(DispalyRouteInfo(quint8,quint8,quint8,quint8,quint8,quint16,float,float,float,float,float,float,qint16,qint16,qint16,qint16,float,float,float)));
                 connect(myDecode,SIGNAL(ShowGPS1(quint8,quint8,double,double,float,float,float)),
                         this,SLOT(DisplayGPS1(quint8,quint8,double,double,float,float,float)));
                 connect(myDecode,SIGNAL(ShowStatus(float,float,float,float,float,float)),
                         this,SLOT(DisplayStatus(float,float,float,float,float,float)));
                 connect(this,SIGNAL(SendCMD4(quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)),
                         myDecode,SLOT(SendCMD4(quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)));
                 connect(myDecode,SIGNAL(ShowEcho(quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)),
                         this,SLOT(DisplayEcho(quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)));
                 */

                 //===========
                 /*
                 connect(SaveTimer,SIGNAL(timeout()),datasave,SLOT(DataProcess()));
                 connect(myDecode,SIGNAL(ShowAttitude(qint16,qint16,qint16,float,float,float,qint16,qint16,qint16,float,float,float)),
                         datasave,SLOT(setAttitude(qint16,qint16,qint16,float,float,float,qint16,qint16,qint16,float,float,float)));
                 connect(myDecode,SIGNAL(ShowSignal(qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,float,float,float,float)),
                         datasave,SLOT(setSignal(qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,float,float,float,float)));
                 connect(myDecode,SIGNAL(ShowStatus(float,float,float,float,float,float)),
                         datasave,SLOT(setStatus(float,float,float,float,float,float)));
                 connect(myDecode,SIGNAL(ShowRouteInfo(quint8,quint8,quint8,quint8,quint8,quint16,float,float,float,float,float,float,qint16,qint16,qint16,qint16,float,float,float)),
                         datasave,SLOT(setRouteInfo(quint8,quint8,quint8,quint8,quint8,quint16,float,float,float,float,float,float,qint16,qint16,qint16,qint16,float,float,float)));
                 connect(myDecode,SIGNAL(ShowGPS1(quint8,quint8,double,double,float,float,float)),
                         datasave,SLOT(setGPS1(quint8,quint8,double,double,float,float,float)));
                         */
                 connect(myDecode,SIGNAL(SendFrame(QByteArray)),myPort,SLOT(SendFrame(QByteArray)));
                 connect(this,SIGNAL(HeartBeatSignal()),
                         myDecode,SLOT(SendBeat()));

                 //===========
                 ui->TakeOffButton->setEnabled(true);//如果成功打开串口，那么解开起飞按键
                 //===========
                 HeartBeat->start(1000);//1s来一次
                 SaveTimer->start(SaveFreq);//100ms
                 ui->DataLink->setIcon(QIcon(":/image/resource/datalink.png"));
             }
         }
         else
         {
             //失能起飞按键
             ui->TakeOffButton->setEnabled(false);
             myPort->close();
             SaveTimer->stop();
             HeartBeat->stop();
             emit isSerialPortHasOpen(false);
             ui->DataLink->setIcon(QIcon(":/image/resource/datalink_Dis.png"));
             AlertSound->stop();
         }
     }
     else
     {
         ui->TakeOffButton->setEnabled(false);
         myPort->close();
         SaveTimer->stop();
         HeartBeat->stop();
         emit isSerialPortHasOpen(false);
         ui->DataLink->setIcon(QIcon(":/image/resource/datalink_Dis.png"));
         AlertSound->stop();
     }
}
//==================设置数据记录频率============
void MainWindow::SaveTimerSetting(int Freq)//重新设置记录频率
{
    SaveFreq = Freq;
    SaveTimer->stop();
    SaveTimer->start(Freq);
}
//==================读取串口=================
void MainWindow::ReadSerial(void)
{
    //qDebug() << "read";
    emit SerialData(myPort->readAll());
}
//================发送心跳帧=================
void MainWindow::SendHeartBeat(void)
{
    emit HeartBeatSignal();//发送心跳指令，防止飞机飞出数传半径之外
}
//================任务窗口==================
void MainWindow::on_Mission_triggered()
{
    if(isSetMissionOpen == 0)
    {
        isSetMissionOpen = 1;
        MissionDialog *SetMission = new MissionDialog();

        connect(SetMission,SIGNAL(isWindowClose(char)),this,SLOT(WindowIDUpdata(char)));
        connect(this,SIGNAL(ChangePoint(mapcontrol::WayPointItem*)),SetMission,SLOT(GetWayPoint(mapcontrol::WayPointItem*)));
        connect(SetMission,SIGNAL(DeleteAll()),this,SLOT(WPdeleteALL()));
        connect(SetMission,SIGNAL(DeletePoint(int)),this,SLOT(WPdelete(int)));

        connect(myDecode,SIGNAL(ShowEcho(quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)),
                SetMission,SLOT(isSendPointComplete(quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)));
        connect(SetMission,SIGNAL(SendOnePoint(quint8,quint16,quint16,double,double,quint16,quint16,quint16,quint8)),
                myDecode,SLOT(SendRoute(quint8,quint16,quint16,double,double,quint16,quint16,quint16,quint8)));
        connect(this,SIGNAL(WPChangedAPoint(int,double,double)),
                SetMission,SLOT(ChangePoint(int,double,double)));

        connect(SetMission,SIGNAL(SendCMD(quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)),
                myDecode,SLOT(SendCMD(quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)));

        connect(myDecode,SIGNAL(ShowRoute(quint8,quint16,quint16,double,double,quint16,quint16,quint16,quint8)),
                SetMission,SLOT(DownLoadPoint(quint8,quint16,quint16,double,double,quint16,quint16,quint16,quint8)));

        connect(SetMission,SIGNAL(ShowDownLoadWayPoint(quint16,double,double)),
                this,SLOT(ShowDownloadWaypoint(quint16,double,double)));

        connect(SetMission,SIGNAL(SetWPLoop(bool)),
                this,SLOT(SetWPLoop(bool)));

        SetMission->show();
        WPSetALL();
        SetMission->exec();
        delete SetMission;
    }
    else
    {
        ui->statusBar->showMessage(tr("该窗口已经存在"),1000);
    }
}
//==============飞机窗口==========================
void MainWindow::on_Airplane_triggered()
{
    if(isAirplaneOpen == 0)
    {
        isAirplaneOpen = 1;
        AirPlaneDialog *AirPlane = new AirPlaneDialog();
        connect(AirPlane,SIGNAL(isWindowClose(char)),this,SLOT(WindowIDUpdata(char)));

        connect(AirPlane,SIGNAL(SendGetVersion(quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)),
                myDecode,SLOT(SendCMD1(quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)),Qt::QueuedConnection);
        connect(myDecode,SIGNAL(ShowVersion(quint16,quint16,quint16,quint16)),
                AirPlane,SLOT(ShowVersion(quint16,quint16,quint16,quint16)));
        connect(AirPlane,SIGNAL(SendCMD2(quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)),
                myDecode,SLOT(SendCMD2(quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)));
        connect(myDecode,SIGNAL(ShowSignal(qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,float,float,float,float)),
                AirPlane,SLOT(ShowSignals(qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,float,float,float,float)));

        connect(this,SIGNAL(Signals(qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,float,float,float,float)),
                AirPlane,SLOT(ShowSignals(qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,float,float,float,float)));

        connect(AirPlane,SIGNAL(SendCMD5(float,float)),
                myDecode,SLOT(SendCMD5(float,float)));

        connect(this,SIGNAL(SendRouteInfo_Hight(float,float,float)),
                AirPlane,SLOT(ShowRouteHight(float,float,float)));

        connect(myDecode,SIGNAL(ShowTaskSet1(float,float,float,float,float,float,float,float)),
                AirPlane,SLOT(DisplayTaskSet1(float,float,float,float,float,float,float,float)));
        connect(myDecode,SIGNAL(ShowTaskSet3(float,float,float,float,float,float,float,float)),
                AirPlane,SLOT(DisplayTaskSet3(float,float,float,float,float,float,float,float)));
        connect(myDecode,SIGNAL(ShowTaskSet6(float,float,float,float,float,float,float,float)),
                AirPlane,SLOT(DisplayTaskSet6(float,float,float,float,float,float,float,float)));

        connect(AirPlane,SIGNAL(SendCMD6(quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)),
                myDecode,SLOT(SendCMD6(quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)));

        connect(AirPlane,SIGNAL(SendTaskSet1(float,float,float,float,float,float,float,float)),
                myDecode,SLOT(SendTaskSetting1(float,float,float,float,float,float,float,float)));
        connect(AirPlane,SIGNAL(SendTaskSet2(float,float,float,float,float,float,float,float)),
                myDecode,SLOT(SendTaskSetting2(float,float,float,float,float,float,float,float)));
        connect(AirPlane,SIGNAL(SendTaskSet3(float,float,float,float,float,float,float,float)),
                myDecode,SLOT(SendTaskSetting3(float,float,float,float,float,float,float,float)));
        connect(AirPlane,SIGNAL(SendTaskSet4(float,float,float,float,float,float,float,float)),
                myDecode,SLOT(SendTaskSetting4(float,float,float,float,float,float,float,float)));
        connect(AirPlane,SIGNAL(SendTaskSet5(float,float,float,float,float,float,float,float)),
                myDecode,SLOT(SendTaskSetting5(float,float,float,float,float,float,float,float)));
        connect(AirPlane,SIGNAL(SendTaskSet6(float,float,float,float,float,float,float,float)),
                myDecode,SLOT(SendTaskSetting6(float,float,float,float,float,float,float,float)));
        connect(AirPlane,SIGNAL(SendTaskSet7(float,float,float,float,float,float,float,float)),
                myDecode,SLOT(SendTaskSetting7(float,float,float,float,float,float,float,float)));

        AirPlane->show();
        AirPlane->exec();
        delete AirPlane;
    }
    else
    {
        ui->statusBar->showMessage(tr("该窗口已经存在"),1000);
    }
}
//================尺子窗口=======================
void MainWindow::on_Rule_triggered()
{
    if(isRuleOpen == 0)
    {
        isRuleOpen = 1;
        RuleDialog *Rule = new RuleDialog();
        connect(Rule,SIGNAL(isWindowClose(char)),this,SLOT(WindowIDUpdata(char)));

        connect(this,SIGNAL(RulePoint(internals::PointLatLng)),
                Rule,SLOT(RulePoint(internals::PointLatLng)));

        connect(map,SIGNAL(EmitCurrentMousePosition(internals::PointLatLng)),
                Rule,SLOT(ShowMousePos(internals::PointLatLng)));

        Rule->show();
        Rule->exec();
        delete Rule;
    }
    else
    {
        ui->statusBar->showMessage(tr("该窗口已经存在"),1000);
    }
}
//====================设置窗口=====================
void MainWindow::on_Setting_triggered()
{
    if(isSettingOpen == 0)
    {
        isSettingOpen = 1;
        SettingDialog *Setting = new SettingDialog();
        connect(Setting,SIGNAL(isWindowClose(char)),this,SLOT(WindowIDUpdata(char)));

        connect(myDecode,SIGNAL(ShowPID(quint8,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)),
                Setting,SLOT(ShowPID(quint8,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)));

        connect(Setting,SIGNAL(SendCMD(quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)),
                myDecode,SLOT(SendCMD(quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8,quint8)));

        connect(Setting,SIGNAL(SendPID(quint8,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)),
                myDecode,SLOT(SendPID(quint8,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)));

        Setting->show();
        Setting->exec();
        delete Setting;
    }
    else
    {
        ui->statusBar->showMessage(tr("该窗口已经存在"),1000);
    }
}

//===================地图======================
void MainWindow::on_MapSetting_triggered()
{
    if(isMapSettingOpen == 0)
    {
        isMapSettingOpen = 1;
        MapSettingDialog *MapSetting = new MapSettingDialog();
        connect(MapSetting,SIGNAL(isWindowClose(char)),this,SLOT(WindowIDUpdata(char)));

        connect(MapSetting,SIGNAL(SetMapType(QString)),
                this,SLOT(SetMapType(QString)));

        MapSetting->show();
        MapSetting->exec();
        delete MapSetting;
    }
    else
    {
        ui->statusBar->showMessage(tr("该窗口已经存在"),1000);
    }
}
//================设置地图类型==========================
void MainWindow::SetMapType(QString str)
{
    if (map->isStarted()) {
        map->SetMapType(mapcontrol::Helper::MapTypeFromString(str));
        map->ReloadMap();
    }
}

//===================程序退出按键=================
void MainWindow::on_Exit_triggered()
{
    qApp->closeAllWindows();
    delete ui;
    exit(0);
    close();
}
//==================数据保存窗口================
void MainWindow::on_SaveData_triggered()
{
    if(isSaveDataOpen == 0)
    {
        isSaveDataOpen = 1;
        SaveDialog *SaveData = new SaveDialog();
        connect(SaveData,SIGNAL(isWindowClose(char)),this,SLOT(WindowIDUpdata(char)));

        if(datasave != NULL)//这个出现bug，在关闭串口之后会出现死机现象
        {
            connect(SaveData,SIGNAL(SendSaveDir(QString)),
                    datasave,SLOT(setFileDir(QString)));
        }

        connect(SaveData,SIGNAL(ShowAttitude(qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,float,float,float)),
                this,SLOT(DisplayAttitude(qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,float,float,float)));
        connect(SaveData,SIGNAL(ShowGPS1(quint8,quint8,double,double,float,float,float)),
                this,SLOT(DisplayGPS1(quint8,quint8,double,double,float,float,float)));
        connect(SaveData,SIGNAL(ShowStatus(float,float,float,float,float,float)),
                this,SLOT(DisplayStatus(float,float,float,float,float,float)));
        connect(SaveData,SIGNAL(ShowRouteInfo(quint8,quint8,quint8,quint8,quint8,quint16,float,float,float,float,float,float,qint16,qint16,qint16,qint16,float,float,float)),
                this,SLOT(DispalyRouteInfo(quint8,quint8,quint8,quint8,quint8,quint16,float,float,float,float,float,float,qint16,qint16,qint16,qint16,float,float,float)));

        connect(SaveData,SIGNAL(ShowSignals(qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16)),
                this,SLOT(DisplaySignals(qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16,qint16)));

        connect(SaveData,SIGNAL(SendFreq(int)),
                this,SLOT(SaveTimerSetting(int)));
        connect(SaveData,SIGNAL(CleanTrail(bool)),
                this,SLOT(CleanTrail(bool)));

        SaveData->show();
        SaveData->exec();
        delete SaveData;
    }
    else
    {
        ui->statusBar->showMessage(tr("该窗口已经存在"),1000);
    }
}

//=================================
//==========析构函数=================
//=================================
MainWindow::~MainWindow()
{
    //要是有窗口打开了先关闭窗口

    if(myPort != 0)
    {
        delete myPort;
    }
    if(myDecode !=0)
    {
        delete myDecode;
    }
    qApp->closeAllWindows();
    delete ui;
    exit(0);
    close();
}

//==================================
//============显示函数================
//==================================
void MainWindow::DisplayRemote(quint8 RSSI,
                               quint8 IMUSelect,
                               float ACC1_X, float ACC1_Y, float ACC1_Z, float GYRO1_X, float GYRO1_Y, float GYRO1_Z, float ROLL1, float PITCH1, float YAW1,
                               float ACC2_X, float ACC2_Y, float ACC2_Z, float GYRO2_X, float GYRO2_Y, float GYRO2_Z, float ROLL2, float PITCH2, float YAW2,
                               quint8 GPS1_Status, quint8 GPS1_Stars, double Latitude1, double Longitude1, float Altitude1, float Course1,
                               quint8 GPS2_Status, quint8 GPS2_Stars, double Latitude2, double Longitude2, float Altitude2, float Course2,
                               quint8 Hour, quint8 Minute, quint8 Second,
                               quint8 SpeedSelect,
                               float AirSpeed,
                               float NorthSpeed1, float EastSpeed1, float DownSpeed1,
                               float NorthSpeed2, float EastSpeed2, float DownSpeed2,
                               float VotageMultiRotor, float VotageFixedWing, float VotageSystem,
                               quint8 isRCValid,
                               float ROL, float PIT, float THR, float RUD,
                               float RotorThrottle, float Rotor1, float Rotor2, float Rotor3, float Rotor4, float Throttle1, float Throttle2, float Aileron, float Elevator, float Rudder,
                               quint16 CurrentTargetPoint, quint16 WaitToFlight, quint16 DiffrentDistance,
                               float DiffrentAngle, float DiffrentHeigh, float DiffrentSpeed,
                               float TargetRoll, float TargetPitch, float TargetYaw, float TargetHeigh,
                               float RelativeHeight,
                               quint8 CtrlMode, quint8 AirPlane, quint8 LockStatus, quint8 TurningStatus, quint8 CurrentStatus,
                               quint8 CutMode,
                               quint8 Command1,
                               quint8 Command2
)
{
    if(YAW1 < 0)
    {
        YAW1 += 360;
    }
    map->UAV->SetUAVHeading(YAW1);//0~359
    ui->Panel->setValue(ROLL1,PITCH1,YAW1);

    //ui->Panel->setPressureAltitude(ALT_P);
    ui->Panel->setBattery(VotageSystem);
    ui->Panel->setAirSpeed(AirSpeed);

    switch(CtrlMode)
    {
        case 0: ui->Panel->setCtrlMode("自动");break;
        case 1: ui->Panel->setCtrlMode("手动");break;
    }

    switch(AirPlane)
    {
        case 0: ui->Panel->setPlaneMode("多旋翼"); map->SetUavPic("Rotor.png");   map->UAV->update();break;
        case 1: ui->Panel->setPlaneMode("固定翼"); map->SetUavPic("Fixwing.png"); map->UAV->update();break;
    }


    switch(CurrentStatus)
    {
        case 0:  ui->Panel->setCurrentStatusMode("锁定");break;
        case 1:  ui->Panel->setCurrentStatusMode("起飞");break;
        case 2:  ui->Panel->setCurrentStatusMode("过渡");break;
        case 3:  ui->Panel->setCurrentStatusMode("巡航");break;
        case 4:  ui->Panel->setCurrentStatusMode("过渡");break;
        case 5:  ui->Panel->setCurrentStatusMode("降落");break;
        default: ui->Panel->setCurrentStatusMode("未知");break;
   }

   switch(LockStatus)
   {
        case 0: ui->Panel->setLockMode("未解锁");   ui->LockButton->setText(tr("解锁"));break;
        case 1: ui->Panel->setLockMode("已解锁");   ui->LockButton->setText(tr("锁定"));break;
   }

   switch(TurningStatus)
   {
        case 0: ui->Panel->setTurningStatus("直线");break;
        case 1: ui->Panel->setTurningStatus("左转");break;
        case 2: ui->Panel->setTurningStatus("右转");break;
   }


   internals::PointLatLng position;
   position.SetLat(Latitude1);
   position.SetLng(Longitude1);
   CurrentPoint = position;//给当前点赋值
   map->UAV->SetUAVPos(position,Altitude1);
   ui->Panel->setGPSStarNumber(GPS1_Stars);
   ui->Panel->setGPSStatus(GPS1_Status);
   ui->Panel->setGPSSpeed(sqrt(NorthSpeed1 * NorthSpeed1 + EastSpeed1 + EastSpeed1));
   ui->Panel->setGPSAltitude(Altitude1);
   ui->Panel->setCourseValue(Course1);


}











void MainWindow::DisplayAttitude(qint16 ACC_X,qint16 ACC_Y,qint16 ACC_Z,
                                 float GYRO_X,float GYRO_Y,float GYRO_Z,
                                 qint16 MAG_X,qint16 MAG_Y,qint16 MAG_Z,
                                 float ROL,float PIT,float YAW)
{
    ACC_X = ACC_X;
    ACC_Y = ACC_Y,
    ACC_Z = ACC_Z,
    GYRO_X = GYRO_X;
    GYRO_Y = GYRO_Y;
    GYRO_Z = GYRO_Z;
    MAG_X = MAG_X;
    MAG_Y = MAG_Y;
    MAG_Z = MAG_Z;
    if(YAW < 0)
    {
        YAW += 360;
    }
    map->UAV->SetUAVHeading(YAW);//0~359


    ui->Panel->setValue(PIT,ROL,YAW);
}

void MainWindow::DisplayStatus(float ALT_U,float ALT_P,float Votage1,float Votage2,float Current1,float Current2)
{
       ALT_U = ALT_U;
       Votage2 =Votage2;
       Current1= Current1;
       Current2 = Current2;

       ui->Panel->setPressureAltitude(ALT_P);
       ui->Panel->setBattery(Votage1);
       //ui->ALT_P->setText(QString::number(ALT_P,'f',2)+"m");
       //ui->Votage1->setText(QString::number(Votage1,'f',2)+"V");
}

void MainWindow::DisplayGPS1(quint8 Status,quint8 StarNum,double Latitude,double Longitude,
                             float Altitude,float Speed,float Course)
{
       //Status=Status;
       //Latitude=Latitude;
       //Longitude=Longitude;

       internals::PointLatLng position;
       position.SetLat(Latitude);
       position.SetLng(Longitude);
       CurrentPoint = position;//给当前点赋值

       //qDebug() << position.Lat()  << position.Lng();
       map->UAV->SetUAVPos(position,Altitude);

       ui->Panel->setGPSStarNumber(StarNum);
       ui->Panel->setGPSStatus(Status);
       ui->Panel->setGPSSpeed(Speed);
       ui->Panel->setGPSAltitude(Altitude);
       ui->Panel->setCourseValue(Course);
       m_Altitude = Altitude;
       if(isOpenSound == true)
       {
           if(StarNum < 5)
           {
               if(AlertSound->isFinished())
               {
                   AlertSound->play();
               }
           }
           else
           {
               AlertSound->stop();
           }
       }
       else
       {
              AlertSound->stop();
       }

}

void MainWindow::DisplaySignals(qint16 S_ROL, qint16 S_PIT, qint16 S_THR, qint16 S_YAW, qint16 S_AUX1, qint16 S_AUX2, qint16 S_AUX3, qint16 S_AUX4, qint16 S_AUX5, qint16 S_AUX6, qint16 S_PWM1, qint16 S_PWM2, qint16 S_PWM3, qint16 S_PWM4, qint16 S_PWM5, qint16 S_PWM6, qint16 S_PWM7, qint16 S_PWM8, float S_PWM9, float S_PWM10, float S_PWM11, float S_PWM12)
{
    //qDebug() << "EMIT" << S_ROL<<S_PIT<<S_THR<<S_YAW ;
    emit Signals(S_ROL,S_PIT,S_THR,S_YAW,S_AUX1,S_AUX2,S_AUX3,S_AUX4,S_AUX5,S_AUX6,
                 S_PWM1,S_PWM2,S_PWM3,S_PWM4,S_PWM5,S_PWM6,S_PWM7,S_PWM8,S_PWM9,S_PWM10,S_PWM11,S_PWM12);
}

void MainWindow::DispalyRouteInfo(quint8 CtrlMode,quint8 AirplaneMode,quint8 CurrentStatus,quint8 LockStatus,quint8 TurningStatus,quint16 CurrentTarget,
                                  float Airspeed,float WaitToFlight,float DiffrentDistance,float DiffrentAngle,float DiffrentHight,float DiffrentSpeed,
                                  qint16 TargetRoll,qint16 TargetPitch,qint16 TargetYaw,qint16 TargetHight,float UseSpeed,float wzSpeed,float BoardHight)
{
       TargetRoll =TargetRoll;
       TargetPitch=TargetPitch;
       TargetYaw  =TargetYaw;
       TargetHight=TargetHight;
       CurrentTarget=CurrentTarget;
       DiffrentSpeed=DiffrentSpeed;


       m_UseSpeed = UseSpeed;
       m_wzSpeed = wzSpeed;
       m_BoardHight = BoardHight;

       ui->BoardHight->setText(QString::number((m_BoardHight)));
       emit SendRouteInfo_Hight(m_Altitude,m_wzSpeed,m_BoardHight);

       ui->Panel->setAirSpeed(Airspeed);
       //

       //ui->AirSpeed->setText(QString::number(Airspeed,'f',2)+"m/s");
       ui->WaitToFlight->setText(QString::number(WaitToFlight,'f',2)+"m");
       ui->DiffrentDistance->setText(QString::number(DiffrentDistance,'f',2)+"m");
       ui->DiffrentAngle->setText(QString::number(DiffrentAngle,'f',2)+"°");
       ui->DiffrentHight->setText(QString::number(DiffrentHight,'f',2)+"m");

       if(CtrlMode == 0)
         ui->Panel->setCtrlMode("自动");
       else if(CtrlMode == 1)
         ui->Panel->setCtrlMode("手动");

       if(AirplaneMode == 0)
       {
         ui->Panel->setPlaneMode("多旋翼");
         map->SetUavPic("Rotor.png");
         map->UAV->update();
       }
       else if(AirplaneMode == 1)
       {
         ui->Panel->setPlaneMode("固定翼");
         map->SetUavPic("Fixwing.png");
         map->UAV->update();
       }

       if(CurrentStatus == 0)
         ui->Panel->setCurrentStatusMode("起飞");
       else if(CurrentStatus == 1)
         ui->Panel->setCurrentStatusMode("过渡");
       else if(CurrentStatus == 2)
         ui->Panel->setCurrentStatusMode("巡航");
       else if(CurrentStatus == 3)
         ui->Panel->setCurrentStatusMode("过渡");
       else if(CurrentStatus == 4)
         ui->Panel->setCurrentStatusMode("降落");
/*
       if(CurrentStatus == 2)
       {
            ui->TravelButton->setEnabled(true);
       }
       else
       {
           ui->TravelButton->setEnabled(false);
       }
*/


       if(LockStatus == 0)
       {
         ui->Panel->setLockMode("未解锁");
         ui->LockButton->setText(tr("解锁"));
       }
       else if(LockStatus == 1)
       {
         ui->Panel->setLockMode("已解锁");
         ui->LockButton->setText(tr("锁定"));
       }

       if(TurningStatus == 0)
         ui->Panel->setTurningStatus("左转");
       else if(TurningStatus == 1)
         ui->Panel->setTurningStatus("右转");
       else if(TurningStatus == 2)
         ui->Panel->setTurningStatus("直线");

}
void MainWindow::DisplayEcho(quint8 Echo_CMD1,quint8 Echo_CMD2,quint8 Echo_CMD3,quint8 Echo_CMD4,
                             quint8 Echo_GetRoute,quint8 Echo_Error2,quint8 Echo_Error3,quint8 Echo_Error4)
{
        Echo_CMD1 = Echo_CMD1;
        Echo_CMD2 = Echo_CMD2;
        Echo_CMD3 = Echo_CMD3;
        Echo_CMD4 = Echo_CMD4;
        Echo_GetRoute = Echo_GetRoute;
        Echo_Error3 = Echo_Error3;
        Echo_Error4 = Echo_Error4;

        switch(Echo_Error2)
        {
             case 0:
               {
                    Echo_Error2 = 0;
               }break;
             case 1:
               {
                    ui->TravelButton->setEnabled(false);
                    ui->RouteButton->setEnabled(false);
                    ui->LandingButton->setEnabled(false);
                    ui->BackhomeButton->setEnabled(false);
                    DisplaySenserERR(Echo_Error2);
               }break;
            case 2:
              {
                    DisplaySenserERR(Echo_Error2);
              }break;
            case 3:
              {
                    ui->TravelButton->setEnabled(false);
                    ui->RouteButton->setEnabled(false);
                    ui->LandingButton->setEnabled(false);
                    ui->BackhomeButton->setEnabled(false);
                    DisplaySenserERR(Echo_Error2);
              }break;
            case 4:
              {
                    ui->TravelButton->setEnabled(false);
                    ui->RouteButton->setEnabled(false);
                    ui->LandingButton->setEnabled(false);
                    ui->BackhomeButton->setEnabled(false);
                    DisplaySenserERR(Echo_Error2);
              }break;
           case 5:
              {
                    ui->TravelButton->setEnabled(false);
                    ui->RouteButton->setEnabled(false);
                    ui->LandingButton->setEnabled(false);
                    ui->BackhomeButton->setEnabled(false);
                    DisplaySenserERR(Echo_Error2);
              }break;
           case 6:
           {
                 DisplaySenserERR(Echo_Error2);
           }break;
        default:Echo_Error2 = 0;break;
        }


}
bool DialogOpen=0;
void MainWindow::DisplaySenserERR(unsigned char Data)
{
    //弹出一个小窗口，选择航线和航点
    QDialog *myabout = new QDialog(this);
    myabout->setFixedSize(200,100);
    myabout->setWindowTitle(tr("警告"));
    myabout->setModal(true);
    myabout->move(this->geometry().x(),this->geometry().y());
   switch(Data)
   {
      case 1:{
       QLabel *ERR = new QLabel(tr("<font color=blue><b>惯导EKF未准备就绪，请等待...</b></font>"));
       QHBoxLayout *mylayout = new QHBoxLayout;
       mylayout->addWidget(ERR);
       myabout->setLayout(mylayout);
   }break;
   case 2:{
       QLabel *ERR = new QLabel(tr("<font color=blue><b>飞机尚未起飞，请检查飞机当前位置</b></font>"));
       QHBoxLayout *mylayout = new QHBoxLayout;
       mylayout->addWidget(ERR);
       myabout->setLayout(mylayout);
   }break;
   case 3:{
       QLabel *ERR = new QLabel(tr("<font color=green><b>请先选择自动控制模式再起飞</b></font>"));
       QHBoxLayout *mylayout = new QHBoxLayout;
       mylayout->addWidget(ERR);
       myabout->setLayout(mylayout);
   }break;
   case 4:{
       QLabel *ERR = new QLabel(tr("<font color=red><b>请先给飞机上锁再点击起飞</b></font>"));
       QHBoxLayout *mylayout = new QHBoxLayout;
       mylayout->addWidget(ERR);
       myabout->setLayout(mylayout);
   }break;
   case 5:{
       QLabel *ERR = new QLabel(tr("<font color=red><b>飞行故障，请摆正飞机</b></font>"));
       QHBoxLayout *mylayout = new QHBoxLayout;
       mylayout->addWidget(ERR);
       myabout->setLayout(mylayout);
   }break;
   case 6:{
       QLabel *ERR = new QLabel(tr("<font color=red><b>飞机加速超过设定限制距离</b></font>"));
       QHBoxLayout *mylayout = new QHBoxLayout;
       mylayout->addWidget(ERR);
       myabout->setLayout(mylayout);
   }break;

   }//end of switch

    myabout->exec();
}


//============命令==================
void MainWindow::on_TakeOffButton_clicked()//起飞
{
     quint8 lock = 0;
     if(ui->LockButton->text() == "锁定")
         lock = 1;
     emit SendCMD4(1,0,0,0,0,0,lock,0);

     ui->TravelButton->setEnabled(true);
     ui->RouteButton->setEnabled(true);
     ui->LandingButton->setEnabled(true);
     ui->BackhomeButton->setEnabled(true);

}

//=///////////////////////////////////////////////////
void MainWindow::on_TravelButton_clicked()//切入航线
{
    //弹出一个小窗口，选择航线和航点
    QDialog *myabout = new QDialog(this);
    myabout->setFixedSize(200,100);
    myabout->setWindowTitle(tr("切入航线"));
    myabout->setModal(true);

    QSpinBox *spinbox = new QSpinBox();
    QPushButton *pushbutton = new QPushButton(tr("确定"));
    spinbox->setValue(1);
    spinbox->setMinimum(1);
    spinbox->setMaximum(125);

    QHBoxLayout *mylayout = new QHBoxLayout;
    mylayout->addWidget(spinbox);
    mylayout->addWidget(pushbutton);
    myabout->setLayout(mylayout);

    connect(spinbox,SIGNAL(valueChanged(int)),
            this,SLOT(TravelNumber(int)));
    connect(pushbutton,SIGNAL(released()),
            this,SLOT(TravelCMD()));
    OrderNumber = 1;//初始化为1

    myabout->exec();
}
void MainWindow::TravelNumber(int number)
{
    OrderNumber = number;
}
void MainWindow::TravelCMD(void)
{
    quint8 number;
    quint8 lock = 0;
    if(ui->LockButton->text() == "锁定")
        lock = 1;

    number = OrderNumber << 1;
    number |= 0x01;

    emit SendCMD4(0,number,0,0,0,0,lock,0);
}
//=///////////////////////////////////////////////////


void MainWindow::on_RouteButton_clicked()//巡航
{
    quint8 lock = 0;
    if(ui->LockButton->text() == "锁定")
        lock = 1;
    emit SendCMD4(0,0,1,0,0,0,lock,0);
}

void MainWindow::on_LandingButton_clicked()//降落
{
    quint8 lock = 0;
    if(ui->LockButton->text() == "锁定")
        lock = 1;
    emit SendCMD4(0,0,0,1,0,0,lock,0);
}

void MainWindow::on_BackhomeButton_clicked()//回航
{
    quint8 lock = 0;
    if(ui->LockButton->text() == "锁定")
        lock = 1;
    emit SendCMD4(0,0,0,0,1,0,lock,0);
}

void MainWindow::on_LockButton_clicked()//锁定
{
    if(ui->LockButton->text() == "解锁")
    {
        emit SendCMD4(0,0,0,0,0,0,1,0);
    }
    else
    {
        emit SendCMD4(0,0,0,0,0,0,0,0);
        ui->TravelButton->setEnabled(false);
        ui->RouteButton->setEnabled(false);
        ui->LandingButton->setEnabled(false);
        ui->BackhomeButton->setEnabled(false);
    }
}

void MainWindow::on_ClearTrail_clicked()
{
    CleanTrail(1);
}

void MainWindow::on_CutOff_clicked()
{

}




//初始化数据保存
void MainWindow::WriteInit(QString Group, QString Name, QString Value)
{
      QDir *temp = new QDir;
      if(!temp->exists("./Init"))
      temp->mkdir("./Init");//如果文件夹不存在就新建

      //Qt中使用QSettings类读写ini文件
       //QSettings构造函数的第一个参数是ini文件的路径,第二个参数表示针对ini文件,第三个参数可以缺省
       QSettings *configIniWrite = new QSettings("./Init/FGCS.ini", QSettings::IniFormat);
       //向ini文件中写入内容,setValue函数的两个参数是键值对
       //向ini文件的第一个节写入内容,ip节下的第一个参数
       QString str = "/";
       str.append(Group);
       str.append("/");
       str.append(Name);
       configIniWrite->setValue(str,Value);
       //写入完成后删除指针
       delete configIniWrite;
}

QString MainWindow::ReadInit(QString Group,QString Name)
{
      QDir *temp = new QDir;
      if(!temp->exists("./Init"))
      {
         //return;//如果文件夹不存在就不执行
      }

      QSettings *configIniRead = new QSettings("./Init/FGCS.ini", QSettings::IniFormat);
       //将读取到的ini文件保存在QString中，先取值，然后通过toString()函数转换成QString类型
      QString str = "/";
      str.append(Group);
      str.append("/");
      str.append(Name);
      QString ipResult = configIniRead->value(str).toString();
       //读入入完成后删除指针
      delete configIniRead;
      //qDebug() << ipResult;
      return ipResult;
}



void MainWindow::on_StartTiming_clicked()
{
    if(ui->StartTiming->text() == "计时")
    {
         TickTimer->start(1000);//1s一次
         Second = 0;
         Minute = 0;
         Hour = 0;
         ui->SecondlcdNumber->display(0);
         ui->MinutelcdNumber->display(0);
         ui->HourlcdNumber->display(0);

         ui->StartTiming->setText(tr("停止"));
    }
    else
    {
         TickTimer->stop();
         ui->StartTiming->setText(tr("计时"));
    }
}

void MainWindow::TickTimerOut(void)
{
    Second++;
    if(Second>59)
    {
        Second = 0;
        Minute++;
        if(Minute>59)
        {
            Minute = 0;
            Hour++;
            if(Hour>23)
            {
                Hour = 0;
            }
        }
    }
    ui->SecondlcdNumber->display(Second);
    ui->MinutelcdNumber->display(Minute);
    ui->HourlcdNumber->display(Hour);
}



